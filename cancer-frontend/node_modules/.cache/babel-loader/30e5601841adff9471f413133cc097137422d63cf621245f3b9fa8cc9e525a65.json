{"ast":null,"code":"import React,{useState,useEffect}from'react';import axios from'axios';import{Chart}from'react-google-charts';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const GanttChart=()=>{const[projects,setProjects]=useState([]);const[loading,setLoading]=useState(true);useEffect(()=>{fetchProjects();},[]);const fetchProjects=async()=>{try{const response=await axios.get('http://localhost:3001/api/projects');setProjects(response.data);setLoading(false);}catch(error){console.error('Error fetching projects:',error);setLoading(false);}};const prepareChartData=()=>{const data=[[{type:'string',label:'Task ID'},{type:'string',label:'Task Name'},{type:'date',label:'Start Date'},{type:'date',label:'End Date'},{type:'number',label:'Duration'},{type:'number',label:'Percent Complete'},{type:'string',label:'Dependencies'}],...projects.map(project=>[project.id.toString(),project.name,new Date(project.start_date),new Date(project.end_date),null,project.progress,null])];return data;};if(loading)return/*#__PURE__*/_jsx(\"div\",{children:\"Loading Gantt chart...\"});return/*#__PURE__*/_jsxs(\"div\",{className:\"gantt-chart\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-xl font-semibold mb-4\",children:\"Project Timeline\"}),/*#__PURE__*/_jsx(Chart,{width:'100%',height:'400px',chartType:\"Gantt\",loader:/*#__PURE__*/_jsx(\"div\",{children:\"Loading Chart\"}),data:prepareChartData(),options:{height:400,gantt:{trackHeight:30}},rootProps:{'data-testid':'1'}})]});};export default GanttChart;","map":{"version":3,"names":["React","useState","useEffect","axios","Chart","jsx","_jsx","jsxs","_jsxs","GanttChart","projects","setProjects","loading","setLoading","fetchProjects","response","get","data","error","console","prepareChartData","type","label","map","project","id","toString","name","Date","start_date","end_date","progress","children","className","width","height","chartType","loader","options","gantt","trackHeight","rootProps"],"sources":["C:/Users/jacks/Desktop/Apps/cancer/cancer-frontend/src/components/GanttChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Chart } from 'react-google-charts';\n\nconst GanttChart = () => {\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchProjects();\n  }, []);\n\n  const fetchProjects = async () => {\n    try {\n      const response = await axios.get('http://localhost:3001/api/projects');\n      setProjects(response.data);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching projects:', error);\n      setLoading(false);\n    }\n  };\n\n  const prepareChartData = () => {\n    const data = [\n      [\n        { type: 'string', label: 'Task ID' },\n        { type: 'string', label: 'Task Name' },\n        { type: 'date', label: 'Start Date' },\n        { type: 'date', label: 'End Date' },\n        { type: 'number', label: 'Duration' },\n        { type: 'number', label: 'Percent Complete' },\n        { type: 'string', label: 'Dependencies' },\n      ],\n      ...projects.map(project => [\n        project.id.toString(),\n        project.name,\n        new Date(project.start_date),\n        new Date(project.end_date),\n        null,\n        project.progress,\n        null\n      ])\n    ];\n    return data;\n  };\n\n  if (loading) return <div>Loading Gantt chart...</div>;\n\n  return (\n    <div className=\"gantt-chart\">\n      <h2 className=\"text-xl font-semibold mb-4\">Project Timeline</h2>\n      <Chart\n        width={'100%'}\n        height={'400px'}\n        chartType=\"Gantt\"\n        loader={<div>Loading Chart</div>}\n        data={prepareChartData()}\n        options={{\n          height: 400,\n          gantt: {\n            trackHeight: 30,\n          },\n        }}\n        rootProps={{ 'data-testid': '1' }}\n      />\n    </div>\n  );\n};\n\nexport default GanttChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}